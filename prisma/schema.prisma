// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}



model VerificationToken {
  identifier String   @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String       @unique
  emailVerified DateTime?
  image         String?
  address       String[]
  phone         String?      // Assuming phone is a string, adjust based on your needs
  
  // Define the relationship with CartItem model
  cart          CartItem[]

  // Define the relationship with Account model
  accounts      Account[]

  // Define the relationship with Session model
  sessions      Session[]

  // Define the foreign key for the Restaurant relationship
  restaurantId  String?

   orders        Order[]   

  // Define the relationship with Restaurant model
  restaurant    Restaurant?  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}


model Restaurant {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  restaurantName String
  address        String?      @default("")
  averageRating  Float       @default(0)
  allReviews     String[]    @default([])
  users         User[]    
  menuItems     Menu[]    
}

model Menu {
  
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  itemName      String
  price         Float
  imageUrls     String[]
  description   String
  isVegetarian  Boolean     
  isMeal        Boolean?    @default(false)
  rating        Float[]    @default([])
  reviews       String[]    @default([])
  restaurantId  String
  categoryId    String
  carts         CartItem[]
  OrderItem     OrderItem[]
  category      Categories  @relation(fields: [categoryId], references: [id])
  restaurant    Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

model Categories {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  categoryName  String
  imageUrl      String
  menus         Menu[]
}

model CartItem {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  userId   String
  menuId   String
  quantity Int
  createdAt DateTime?  @default(now())  
  user     User       @relation(fields: [userId], references: [id])
  menu     Menu       @relation(fields: [menuId], references: [id])
}


model Order {
  id                   String               @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber          String               @unique
  userId               String
  totalAmount          Float
  orderedItems         OrderItem[]
  createdAt            DateTime             @default(now())
  user                 User                 @relation(fields: [userId], references: [id])
  deliveryCompletions  DeliveryCompletion?  
  deliveryPersonId     String     
  deliveryPerson       DeliveryPerson        @relation(fields: [deliveryPersonId], references: [id])
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String
  menuId    String
  quantity  Int
  price     Float
  total     Float
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id])
  menu      Menu     @relation(fields: [menuId], references: [id])
}


model DeliveryPerson {
  id                   String               @id @default(auto()) @map("_id") @db.ObjectId
  isAvailable          Boolean              @default(true)
  orders               Order[]              
  deliveryCompletions  DeliveryCompletion[] 
  name                 String
  phone                Int
}


model DeliveryCompletion {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  orderId           String         @unique
  feedback          String?
  order             Order          @relation(fields: [orderId], references: [id])
  deliveryPersonId  String
  deliveryPerson    DeliveryPerson   @relation(fields: [deliveryPersonId], references: [id])
}
